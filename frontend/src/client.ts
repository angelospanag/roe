/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * My API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AddFeedInputBody,
  AddFeedOutputBody,
  ErrorModel,
  GetFeedItemOutputBody,
  GetFeedItemsOutputBody,
  GetFeedsOutputBody,
  UpdateFeedItemInputBody,
  UpdateFeedItemOutputBody
} from './model'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;





/**
 * @summary Get all feeds
 */
export const getFeeds = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFeedsOutputBody>> => {
    
    return axios.default.get(
      `http://localhost:8000/feeds`,options
    );
  }


export const getGetFeedsQueryKey = () => {
    return [`http://localhost:8000/feeds`] as const;
    }

    
export const getGetFeedsQueryOptions = <TData = Awaited<ReturnType<typeof getFeeds>>, TError = AxiosError<ErrorModel>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeeds>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFeedsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeeds>>> = ({ signal }) => getFeeds({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFeeds>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFeedsQueryResult = NonNullable<Awaited<ReturnType<typeof getFeeds>>>
export type GetFeedsQueryError = AxiosError<ErrorModel>


export function useGetFeeds<TData = Awaited<ReturnType<typeof getFeeds>>, TError = AxiosError<ErrorModel>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeeds>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeeds>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFeeds<TData = Awaited<ReturnType<typeof getFeeds>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeeds>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeeds>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFeeds<TData = Awaited<ReturnType<typeof getFeeds>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeeds>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all feeds
 */

export function useGetFeeds<TData = Awaited<ReturnType<typeof getFeeds>>, TError = AxiosError<ErrorModel>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeeds>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFeedsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a feed
 */
export const postFeed = (
    addFeedInputBody: NonReadonly<AddFeedInputBody>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AddFeedOutputBody>> => {
    
    return axios.default.post(
      `http://localhost:8000/feeds`,
      addFeedInputBody,options
    );
  }



export const getPostFeedMutationOptions = <TError = AxiosError<ErrorModel>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFeed>>, TError,{data: NonReadonly<AddFeedInputBody>}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postFeed>>, TError,{data: NonReadonly<AddFeedInputBody>}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFeed>>, {data: NonReadonly<AddFeedInputBody>}> = (props) => {
          const {data} = props ?? {};

          return  postFeed(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFeedMutationResult = NonNullable<Awaited<ReturnType<typeof postFeed>>>
    export type PostFeedMutationBody = NonReadonly<AddFeedInputBody>
    export type PostFeedMutationError = AxiosError<ErrorModel>

    /**
 * @summary Create a feed
 */
export const usePostFeed = <TError = AxiosError<ErrorModel>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFeed>>, TError,{data: NonReadonly<AddFeedInputBody>}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postFeed>>,
        TError,
        {data: NonReadonly<AddFeedInputBody>},
        TContext
      > => {

      const mutationOptions = getPostFeedMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get feed items
 */
export const getFeedItems = (
    feedID: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFeedItemsOutputBody>> => {
    
    return axios.default.get(
      `http://localhost:8000/feeds/${feedID}/items`,options
    );
  }


export const getGetFeedItemsQueryKey = (feedID: number,) => {
    return [`http://localhost:8000/feeds/${feedID}/items`] as const;
    }

    
export const getGetFeedItemsQueryOptions = <TData = Awaited<ReturnType<typeof getFeedItems>>, TError = AxiosError<ErrorModel>>(feedID: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItems>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFeedItemsQueryKey(feedID);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeedItems>>> = ({ signal }) => getFeedItems(feedID, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(feedID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFeedItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFeedItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getFeedItems>>>
export type GetFeedItemsQueryError = AxiosError<ErrorModel>


export function useGetFeedItems<TData = Awaited<ReturnType<typeof getFeedItems>>, TError = AxiosError<ErrorModel>>(
 feedID: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeedItems>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFeedItems<TData = Awaited<ReturnType<typeof getFeedItems>>, TError = AxiosError<ErrorModel>>(
 feedID: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeedItems>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFeedItems<TData = Awaited<ReturnType<typeof getFeedItems>>, TError = AxiosError<ErrorModel>>(
 feedID: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItems>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get feed items
 */

export function useGetFeedItems<TData = Awaited<ReturnType<typeof getFeedItems>>, TError = AxiosError<ErrorModel>>(
 feedID: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItems>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFeedItemsQueryOptions(feedID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get feed item
 */
export const getFeedItem = (
    feedID: number,
    itemID: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFeedItemOutputBody>> => {
    
    return axios.default.get(
      `http://localhost:8000/feeds/${feedID}/items/${itemID}`,options
    );
  }


export const getGetFeedItemQueryKey = (feedID: number,
    itemID: number,) => {
    return [`http://localhost:8000/feeds/${feedID}/items/${itemID}`] as const;
    }

    
export const getGetFeedItemQueryOptions = <TData = Awaited<ReturnType<typeof getFeedItem>>, TError = AxiosError<ErrorModel>>(feedID: number,
    itemID: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItem>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFeedItemQueryKey(feedID,itemID);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeedItem>>> = ({ signal }) => getFeedItem(feedID,itemID, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(feedID && itemID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFeedItem>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFeedItemQueryResult = NonNullable<Awaited<ReturnType<typeof getFeedItem>>>
export type GetFeedItemQueryError = AxiosError<ErrorModel>


export function useGetFeedItem<TData = Awaited<ReturnType<typeof getFeedItem>>, TError = AxiosError<ErrorModel>>(
 feedID: number,
    itemID: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItem>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeedItem>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFeedItem<TData = Awaited<ReturnType<typeof getFeedItem>>, TError = AxiosError<ErrorModel>>(
 feedID: number,
    itemID: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItem>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeedItem>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFeedItem<TData = Awaited<ReturnType<typeof getFeedItem>>, TError = AxiosError<ErrorModel>>(
 feedID: number,
    itemID: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItem>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get feed item
 */

export function useGetFeedItem<TData = Awaited<ReturnType<typeof getFeedItem>>, TError = AxiosError<ErrorModel>>(
 feedID: number,
    itemID: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeedItem>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFeedItemQueryOptions(feedID,itemID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update feed item
 */
export const updateFeedItem = (
    feedID: number,
    itemID: number,
    updateFeedItemInputBody: NonReadonly<UpdateFeedItemInputBody>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateFeedItemOutputBody>> => {
    
    return axios.default.post(
      `http://localhost:8000/feeds/${feedID}/items/${itemID}`,
      updateFeedItemInputBody,options
    );
  }



export const getUpdateFeedItemMutationOptions = <TError = AxiosError<ErrorModel>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateFeedItem>>, TError,{feedID: number;itemID: number;data: NonReadonly<UpdateFeedItemInputBody>}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateFeedItem>>, TError,{feedID: number;itemID: number;data: NonReadonly<UpdateFeedItemInputBody>}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateFeedItem>>, {feedID: number;itemID: number;data: NonReadonly<UpdateFeedItemInputBody>}> = (props) => {
          const {feedID,itemID,data} = props ?? {};

          return  updateFeedItem(feedID,itemID,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateFeedItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateFeedItem>>>
    export type UpdateFeedItemMutationBody = NonReadonly<UpdateFeedItemInputBody>
    export type UpdateFeedItemMutationError = AxiosError<ErrorModel>

    /**
 * @summary Update feed item
 */
export const useUpdateFeedItem = <TError = AxiosError<ErrorModel>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateFeedItem>>, TError,{feedID: number;itemID: number;data: NonReadonly<UpdateFeedItemInputBody>}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof updateFeedItem>>,
        TError,
        {feedID: number;itemID: number;data: NonReadonly<UpdateFeedItemInputBody>},
        TContext
      > => {

      const mutationOptions = getUpdateFeedItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
